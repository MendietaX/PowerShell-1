 <#
.SYNOPSIS
Get file version info on computers.

.PARAMETER ComputerName
Specifies the computers to query.

.PARAMETER FilePath
Specifies the file to query.

.PARAMETER IncludeError
Optional switch to include errors.

.INPUTS
None. You cannot pipe objects.

.OUTPUTS
System.Object

.EXAMPLE
.\Get-FileVersion (Get-Content .\computers.txt) -FilePath 'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'

.EXAMPLE
.\Get-FileVersion (Get-Content .\computers.txt) -FilePath 'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe' -IncludeError

.EXAMPLE
.\Get-FileVersion (Get-Content .\computers.txt) -FilePath 'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe' -Verbose -IncludeError |
Export-Csv Chrome.csv -NoTypeInformation

.NOTES
Author: Matthew D. Daugherty
Date Modified: 25 July 2020

#>

[CmdletBinding()]
param (

    [Parameter(Mandatory)]
    [string[]]
    $ComputerName,

    [Parameter(Mandatory)]
    [string]
    $FilePath,

    [Parameter()]
    [switch]
    $IncludeError
)

$FileName = Split-Path -Path $FilePath -Leaf

# Script block for Invoke-Command
$InvokeCommandScriptBlock = {

    $VerbosePreference = $Using:VerbosePreference
    
    Write-Verbose "Querying $Using:FileName on $env:COMPUTERNAME"

    $Result = [PSCustomObject]@{

        FileExists = $false
        FileVersion = $null
        LastWriteTime = $null
    }

    if (Test-Path -Path $Using:FilePath) {

        $Result.FileExists = $true

        $File = Get-Item -Path $Using:FilePath

        $Result.FileVersion = $File.VersionInfo.FileVersionRaw

        $Result.LastWriteTime = $File.LastWriteTime
    }

    $Result
}

# Parameters for Invoke-Command
$InvokeCommandParams = @{

    ComputerName = $ComputerName
    ScriptBlock = $InvokeCommandScriptBlock
    ErrorAction = 'SilentlyContinue'
}

if ($IncludeError.IsPresent) {

    $InvokeCommandParams.Add('ErrorVariable','icmErrors')
}

Invoke-Command @InvokeCommandParams | ForEach-Object {

    [PSCustomObject]@{

        ComputerName = $_.PSComputerName.ToUpper()
        FileName = $FileName
        FileExists = $_.FileExists
        FileVersion = $_.FileVersion
        LastWriteTime = $_.LastWriteTime
        Error = $null
    }
}

if ($IncludeError.IsPresent) {

    if ($icmErrors) {

        foreach ($icmError in $icmErrors) {

            [PSCustomObject]@{

                ComputerName = $icmError.TargetObject.ToUpper()
                FileName = $null
                FileExists = $null
                FileVersion = $null
                LastWriteTime = $null
                Error = $icmError.FullyQualifiedErrorId
            }
        }
    }
}
